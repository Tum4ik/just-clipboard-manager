<Window x:ClassModifier="internal"
        x:Class="Tum4ik.JustClipboardManager.Views.PasteWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:Tum4ik.JustClipboardManager.ViewModels"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:Tum4ik.JustClipboardManager.Views"
        xmlns:controls="clr-namespace:Tum4ik.JustClipboardManager.Controls"
        xmlns:theming="clr-namespace:Tum4ik.JustClipboardManager.PluginDevKit.Theming;assembly=Tum4ik.JustClipboardManager.PluginDevKit"
        xmlns:converters="clr-namespace:Tum4ik.JustClipboardManager.Converters"
        xmlns:ap="clr-namespace:Tum4ik.JustClipboardManager.AttachedProperties"
        d:DataContext="{d:DesignInstance vm:PasteWindowViewModel}"
        mc:Ignorable="d"
        Activated="This_Activated"
        IsVisibleChanged="This_IsVisibleChanged"
        ShowInTaskbar="False"
        SizeToContent="WidthAndHeight"
        WindowStartupLocation="Manual"
        Margin="24"
        Style="{StaticResource WindowBefore11Style}"
        x:Name="This">
  <Window.Resources>
    <controls:ClipTypeDataTemplateSelector x:Key="ClipTypeDataTemplateSelector"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:InvertedBoolConverter x:Key="InvertedBoolConverter"/>
    <converters:SizeToRectConverter x:Key="SizeToRectConverter"/>

    <Style x:Key="BaseListBoxItem" TargetType="ListBoxItem">
      <Setter Property="Cursor" Value="Hand"/>
      <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ListBoxItem">
            <Button Command="{Binding DataContext.PasteDataCommand, ElementName=This}" CommandParameter="{Binding}">
              <ContentPresenter/>
              <Button.Template>
                <ControlTemplate TargetType="Button">
                  <Border x:Name="_border"
                          CornerRadius="4" MinHeight="36"
                          Background="Transparent">
                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                      </Grid.ColumnDefinitions>
                      <Grid.Clip>
                        <RectangleGeometry RadiusX="4" RadiusY="4">
                          <RectangleGeometry.Rect>
                            <MultiBinding Converter="{StaticResource SizeToRectConverter}">
                              <Binding Path="ActualWidth" ElementName="_border"/>
                              <Binding Path="ActualHeight" ElementName="_border"/>
                            </MultiBinding>
                          </RectangleGeometry.Rect>
                        </RectangleGeometry>
                      </Grid.Clip>
                      <ContentPresenter Grid.Column="0"/>
                      <controls:InputFieldButton Grid.Column="1"
                                                 Icon="PushPin"
                                                 IconColor="{DynamicResource {x:Static theming:AppColors.AccentDefaultBrush}}"
                                                 Margin="3, 0"
                                                 Command="{Binding DataContext.UnpinClipCommand, ElementName=This}"
                                                 CommandParameter="{Binding}"
                                                 ToolTip="{Binding DataContext.Translate[Unpin], ElementName=This}">
                        <controls:InputFieldButton.Visibility>
                          <Binding Path="(ap:ClipInfo.IsPinned)"
                                   RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}"
                                   Converter="{StaticResource BooleanToVisibilityConverter}"/>
                        </controls:InputFieldButton.Visibility>
                      </controls:InputFieldButton>
                      <StackPanel x:Name="_actionButtons"
                                  Grid.Column="2"
                                  Orientation="Horizontal"
                                  Visibility="Collapsed">
                        <controls:InputFieldButton Icon="PushPin"
                                                   Command="{Binding DataContext.PinClipCommand, ElementName=This}"
                                                   CommandParameter="{Binding}"
                                                   ToolTip="{Binding DataContext.Translate[Pin], ElementName=This}">
                          <controls:InputFieldButton.Visibility>
                            <Binding Path="(ap:ClipInfo.IsPinned)"
                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}">
                              <Binding.Converter>
                                <converters:ValueConverterGroup>
                                  <converters:InvertedBoolConverter/>
                                  <BooleanToVisibilityConverter/>
                                </converters:ValueConverterGroup>
                              </Binding.Converter>
                            </Binding>
                          </controls:InputFieldButton.Visibility>
                        </controls:InputFieldButton>
                        <controls:InputFieldButton Icon="Delete" Margin="3, 0"
                                                   Command="{Binding DataContext.DeleteClipCommand, ElementName=This}"
                                                   CommandParameter="{Binding}"
                                                   ToolTip="{Binding DataContext.Translate[Delete], ElementName=This}">
                          <controls:InputFieldButton.Visibility>
                            <Binding Path="(ap:ClipInfo.IsPinned)"
                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}">
                              <Binding.Converter>
                                <converters:ValueConverterGroup>
                                  <converters:InvertedBoolConverter/>
                                  <BooleanToVisibilityConverter/>
                                </converters:ValueConverterGroup>
                              </Binding.Converter>
                            </Binding>
                          </controls:InputFieldButton.Visibility>
                        </controls:InputFieldButton>
                      </StackPanel>
                    </Grid>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="_border"
                              Property="Background" Value="{DynamicResource {x:Static theming:AppColors.ItemHoverBackgroundBrush}}"/>
                      <Setter TargetName="_actionButtons" Property="Visibility" Value="Visible"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                      <Setter TargetName="_border"
                              Property="Background" Value="{DynamicResource {x:Static theming:AppColors.ItemPressedBackgroundBrush}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                      <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.TextDisabledBrush}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Button.Template>
            </Button>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
  </Window.Resources>
  <i:Interaction.Triggers>
    <i:PropertyChangedTrigger Binding="{Binding Visibility, ElementName=This}">
      <i:InvokeCommandAction Command="{Binding WindowVisibilityChangedCommand}"
                             CommandParameter="{Binding Visibility, ElementName=This}"/>
    </i:PropertyChangedTrigger>
    <i:EventTrigger EventName="Deactivated">
      <i:InvokeCommandAction Command="{Binding WindowDeactivatedCommand}"/>
    </i:EventTrigger>
  </i:Interaction.Triggers>
  <Window.Template>
    <ControlTemplate TargetType="local:PasteWindow">
      <Border x:Name="_windowBorder"
              Width="{Binding DataContext.WindowWidth, ElementName=This, Mode=TwoWay}"
              Height="{Binding DataContext.WindowHeight, ElementName=This, Mode=TwoWay}"
              MinWidth="{Binding DataContext.WindowMinWidth, ElementName=This}"
              MinHeight="{Binding DataContext.WindowMinHeight, ElementName=This}"
              Opacity="{Binding DataContext.WindowOpacity, ElementName=This}"
              CornerRadius="8"
              Margin="{TemplateBinding Margin}"
              Background="{TemplateBinding Background}"
              BorderThickness="{TemplateBinding BorderThickness}"
              BorderBrush="{TemplateBinding BorderBrush}"
              Effect="{TemplateBinding Effect}"
              Padding="4">
        <ContentPresenter />
      </Border>
    </ControlTemplate>
  </Window.Template>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
      <RowDefinition/>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
      <ColumnDefinition/>
      <ColumnDefinition Width="Auto"/>
    </Grid.ColumnDefinitions>
    <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <controls:SearchBox x:Name="_searchBox"
                          Grid.Column="0"
                          Text="{Binding Search, UpdateSourceTrigger=PropertyChanged, Delay=1000}"
                          Margin="0, 0, 4, 0"
                          IsEnabled="{Binding IsSettingsMode, Converter={StaticResource InvertedBoolConverter}}"/>
      <controls:WinUiButton Grid.Column="1"
                            Icon="Settings"
                            ToolTip="{Binding Translate[Settings]}"
                            Command="{Binding SettingsCommand}">
        <i:Interaction.Triggers>
          <i:DataTrigger Binding="{Binding IsSettingsMode}" Value="True">
            <i:ChangePropertyAction PropertyName="ButtonStyle" Value="Accent"/>
          </i:DataTrigger>
          <i:DataTrigger Binding="{Binding IsSettingsMode}" Value="False">
            <i:ChangePropertyAction PropertyName="ButtonStyle" Value="Standard"/>
          </i:DataTrigger>
        </i:Interaction.Triggers>
      </controls:WinUiButton>
    </Grid>
    <ListBox Grid.Row="1" Grid.Column="0"
             Margin="0, 4, 0, 0"
             ItemsSource="{Binding PinnedClips}"
             ItemTemplateSelector="{StaticResource ClipTypeDataTemplateSelector}">
      <i:Interaction.Triggers>
        <i:DataTrigger Binding="{Binding PinnedClips.Count}" Value="0">
          <i:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
        </i:DataTrigger>
        <i:DataTrigger Binding="{Binding PinnedClips.Count}" Comparison="NotEqual" Value="0">
          <i:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
        </i:DataTrigger>
      </i:Interaction.Triggers>
      <ListBox.Resources>
        <Style TargetType="ListBoxItem" BasedOn="{StaticResource BaseListBoxItem}">
          <Setter Property="ap:ClipInfo.IsPinned" Value="True"/>
        </Style>
      </ListBox.Resources>
      <ListBox.Template>
        <ControlTemplate TargetType="ListBox">
          <Border CornerRadius="4"
                  BorderThickness="1" BorderBrush="{DynamicResource {x:Static theming:AppColors.ControlBorderGradientBrush}}">
            <ItemsPresenter/>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSettingsMode}" Value="True">
              <Setter Property="Opacity" Value="0.6"/>
              <Setter Property="IsHitTestVisible" Value="False"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </ListBox.Template>
    </ListBox>
    <ListBox x:Name="_listBox"
             Grid.Row="2" Grid.Column="0"
             Margin="0, 4, 0, 0"
             ItemsSource="{Binding Clips}"
             ItemTemplateSelector="{StaticResource ClipTypeDataTemplateSelector}"
             ScrollViewer.ScrollChanged="ListBox_ScrollChanged"
             ScrollViewer.CanContentScroll="False"
             ScrollViewer.HorizontalScrollBarVisibility="Disabled">
      <ListBox.Resources>
        <Style TargetType="ListBoxItem" BasedOn="{StaticResource BaseListBoxItem}">
          <Setter Property="ap:ClipInfo.IsPinned" Value="False"/>
        </Style>
      </ListBox.Resources>
      <ListBox.Template>
        <ControlTemplate TargetType="ListBox">
          <Border CornerRadius="4"
                  BorderThickness="1" BorderBrush="{DynamicResource {x:Static theming:AppColors.ControlBorderGradientBrush}}"
                  Background="{DynamicResource {x:Static theming:AppColors.ControlBackgroundBrush}}">
            <ScrollViewer Padding="1">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsSettingsMode}" Value="True">
              <Setter Property="Opacity" Value="0.6"/>
              <Setter Property="IsHitTestVisible" Value="False"/>
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </ListBox.Template>
    </ListBox>
    <Grid Grid.Row="3" Grid.Column="0"
          Visibility="{Binding DataContext.IsSettingsMode, ElementName=This, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Border Grid.Column="0" Background="Transparent" ToolTip="{Binding Translate[Opacity]}">
        <controls:SvgIcon Icon="Opacity" Width="14" Height="14" Margin="8, 0"
                          VerticalAlignment="Center"/>
      </Border>
      <controls:WinUiSlider Grid.Column="1"
                            Minimum="0" Maximum="1"
                            Value="{Binding WindowOpacity}"/>
    </Grid>
    <Thumb Grid.Row="4" Grid.Column="0"
           Cursor="SizeNS" DragDelta="Thumb_VerticalDragDelta"
           Visibility="{Binding DataContext.IsSettingsMode, ElementName=This, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Thumb.Template>
        <ControlTemplate>
          <Border Height="5" Margin="2, 4, 2, 0" Background="Transparent">
            <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
                       Background="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
          </Border>
        </ControlTemplate>
      </Thumb.Template>
    </Thumb>
    <Thumb Grid.Row="1" Grid.Column="1" Grid.RowSpan="3"
           Cursor="SizeWE" DragDelta="Thumb_HorizontalDragDelta"
           Visibility="{Binding DataContext.IsSettingsMode, ElementName=This, Converter={StaticResource BooleanToVisibilityConverter}}">
      <Thumb.Template>
        <ControlTemplate>
          <Border Width="5" Margin="4, 6, 0, 2" Background="Transparent">
            <StackPanel Orientation="Horizontal">
              <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
                         Background="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
            </StackPanel>
          </Border>
        </ControlTemplate>
      </Thumb.Template>
    </Thumb>
  </Grid>
</Window>

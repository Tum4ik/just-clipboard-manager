<ResourceDictionary x:Class="Tum4ik.JustClipboardManager.Styles.GeneralStyles"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=netstandard"
                    xmlns:controls="clr-namespace:Tum4ik.JustClipboardManager.Controls"
                    xmlns:theming="clr-namespace:Tum4ik.JustClipboardManager.PluginDevKit.Theming;assembly=Tum4ik.JustClipboardManager.PluginDevKit"
                    xmlns:math="http://hexinnovation.com/math">

  <math:MathConverter x:Key="MathConverter"/>

  <system:Double x:Key="FontSize">14</system:Double>

  <ContextMenu x:Key="ContextMenuDisabled" Visibility="Collapsed"/>


  <DropShadowEffect x:Key="DefaultDropShadowEffect"
                    Color="Black"
                    Direction="270"
                    Opacity="{DynamicResource ShadowOpacity}"
                    BlurRadius="16"
                    ShadowDepth="8"
                    RenderingBias="Quality"/>


  <Style x:Key="WindowBefore11Style" TargetType="Window">
    <Setter Property="UseLayoutRounding" Value="True"/>
    <Setter Property="WindowStyle" Value="None"/>
    <Setter Property="AllowsTransparency" Value="True"/>
    <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
    <Setter Property="Margin" Value="24, 0, 24, 24"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static theming:AppColors.AppSurfaceBackgroundBrush}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static theming:AppColors.AppSurfaceBorderBrush}}"/>
    <Setter Property="Effect" Value="{StaticResource DefaultDropShadowEffect}"/>
  </Style>

  <Style TargetType="Window">
    <Setter Property="UseLayoutRounding" Value="True"/>
    <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
  </Style>

  <Style TargetType="ContentControl">
    <Setter Property="Focusable" Value="False"/>
  </Style>

  <Style TargetType="ItemsControl">
    <Setter Property="Focusable" Value="False"/>
  </Style>

  <Style x:Key="FocusRectStyle" TargetType="Rectangle">
    <Setter Property="StrokeThickness" Value="2"/>
    <Setter Property="Stroke" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
    <Setter Property="RadiusX" Value="4"/>
    <Setter Property="RadiusY" Value="4"/>
  </Style>

  <Style x:Key="FocusStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Style="{StaticResource FocusRectStyle}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="controls:TabButton">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
  </Style>
  <Style TargetType="controls:NavigationButton">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
  </Style>
  <Style TargetType="controls:AppBarNavigationButton">
    <Setter Property="FocusVisualStyle" Value="{StaticResource FocusStyle}"/>
  </Style>

  <Style TargetType="controls:CaptionButton">
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="HoverBackgroundBrush" Value="{DynamicResource {x:Static theming:AppColors.ItemHoverBackgroundBrush}}"/>
    <Setter Property="IconColor" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
    <Setter Property="HoverIconBrush" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
    <Setter Property="PressedBackgroundBrush" Value="{DynamicResource {x:Static theming:AppColors.ItemPressedBackgroundBrush}}"/>
    <Setter Property="PressedIconBrush" Value="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:CaptionButton">
          <Border x:Name="_border"
                  Width="46" Height="32"
                  Background="Transparent"
                  CornerRadius="{TemplateBinding CornerRadius}">
            <controls:SvgIcon x:Name="_icon"
                              Icon="{TemplateBinding Icon}"
                              Width="10" Height="10"
                              Color="{TemplateBinding IconColor}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardNavigatedFocus" Value="True">
              <Setter TargetName="_border" Property="BorderThickness" Value="2"/>
              <Setter TargetName="_border" Property="BorderBrush" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="_border"
                      Property="Background"
                      Value="{Binding HoverBackgroundBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter TargetName="_icon"
                      Property="Color"
                      Value="{Binding HoverIconBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="_border"
                      Property="Background"
                      Value="{Binding PressedBackgroundBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter TargetName="_icon"
                      Property="Color"
                      Value="{Binding PressedIconBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ContextMenuBorderStyle" TargetType="Border">
    <Setter Property="CornerRadius" Value="8"/>
    <Setter Property="Margin" Value="24"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Effect" Value="{StaticResource DefaultDropShadowEffect}"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static theming:AppColors.AcrylicBackgroundBrush}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static theming:AppColors.ContextMenuBorderBrush}}"/>
  </Style>
  <Style x:Key="ContextMenuStackPanelStyle" TargetType="StackPanel">
    <Setter Property="IsItemsHost" Value="True"/>
    <Setter Property="Margin" Value="0, 3"/>
    <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
  </Style>
  <Style TargetType="ContextMenu">
    <Setter Property="FontSize" Value="{StaticResource FontSize}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContextMenu">
          <Border Style="{StaticResource ContextMenuBorderStyle}">
            <StackPanel Style="{StaticResource ContextMenuStackPanelStyle}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="MenuItem">
    <Setter Property="Cursor" Value="Hand"/>
  </Style>
  <Style x:Key="MenuItemBorderStyle" TargetType="Border">
    <Setter Property="Margin" Value="5, 2"/>
    <Setter Property="Height" Value="36"/>
    <Setter Property="MinWidth" Value="152"/>
    <Setter Property="CornerRadius" Value="4"/>
    <Setter Property="Background" Value="Transparent"/>
    <Style.Triggers>
      <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static theming:AppColors.ItemHoverBackgroundBrush}}"/>
      </DataTrigger>
      <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static theming:AppColors.ItemPressedBackgroundBrush}}"/>
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
    <Border Style="{StaticResource MenuItemBorderStyle}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <controls:SvgIcon Grid.Column="0"
                          x:Name="_checkIcon"
                          Visibility="Collapsed"
                          Icon="Check" Color="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"
                          Width="11" Height="11"
                          VerticalAlignment="Center"
                          Margin="15, 0, 3, 0"/>
        <ContentPresenter Grid.Column="1" ContentSource="Header"
                          VerticalAlignment="Center"
                          Margin="12, 0"/>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsCheckable" Value="True"/>
          <Condition Property="IsChecked" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="_checkIcon" Property="Visibility" Value="Hidden"/>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsCheckable" Value="True"/>
          <Condition Property="IsChecked" Value="True"/>
        </MultiTrigger.Conditions>
        <Setter TargetName="_checkIcon" Property="Visibility" Value="Visible"/>
      </MultiTrigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="_checkIcon" Property="Color" Value="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="_checkIcon" Property="Color" Value="{DynamicResource {x:Static theming:AppColors.TextDisabledBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.TextDisabledBrush}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
    <Border Style="{StaticResource MenuItemBorderStyle}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <ContentPresenter Grid.Column="0" ContentSource="Header"
                          VerticalAlignment="Center"
                          Margin="12, 0"/>
        <controls:SvgIcon x:Name="_icon"
                          Grid.Column="1"
                          Icon="Chevron" Color="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"
                          Width="8" Height="8"
                          VerticalAlignment="Center"
                          Margin="0, 0, 16, 0"/>
        <Popup x:Name="Popup"
               Placement="Right"
               IsOpen="{TemplateBinding IsSubmenuOpen}"
               AllowsTransparency="True"
               Focusable="False"
               PopupAnimation="Fade">
          <Border Style="{StaticResource ContextMenuBorderStyle}">
            <StackPanel Style="{StaticResource ContextMenuStackPanelStyle}"/>
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsPressed" Value="True"/>
          <Condition SourceName="Popup" Property="IsOpen" Value="False"/>
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.TextSecondaryBrush}}"/>
        <Setter TargetName="_icon" Property="Color" Value="{DynamicResource {x:Static theming:AppColors.TextTertiaryBrush}}"/>
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.TextDisabledBrush}}"/>
        <Setter TargetName="_icon" Property="Color" Value="{DynamicResource {x:Static theming:AppColors.TextDisabledBrush}}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
    <Setter Property="Margin" Value="0, 2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border Background="{DynamicResource {x:Static theming:AppColors.ItemDividerBrush}}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="TextBlock">
    <Setter Property="TextWrapping" Value="Wrap"/>
  </Style>
  <Style TargetType="TextBox">
    <Setter Property="ContextMenu" Value="{StaticResource ContextMenuDisabled}"/>
    <Setter Property="CaretBrush" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
  </Style>
  <Style TargetType="controls:SearchBox" BasedOn="{StaticResource {x:Type TextBox}}"/>
  <Style TargetType="controls:NumberBox" BasedOn="{StaticResource {x:Type TextBox}}"/>

  <Style TargetType="controls:SvgIcon">
    <Setter Property="Color" Value="{DynamicResource {x:Static theming:AppColors.TextPrimaryBrush}}"/>
  </Style>

  <ControlTemplate x:Key="VerticalScrollBarTemplate" TargetType="ScrollBar">
    <ControlTemplate.Resources>
      <Style TargetType="RepeatButton" x:Key="ScrollBarLineButtonStyle">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="0, 5"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="RepeatButton">
              <ContentPresenter/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="RepeatButton" x:Key="ScrollBarPageButtonStyle">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="RepeatButton">
              <Border Background="Transparent"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="controls:SvgIcon">
        <Setter Property="Width" Value="8"/>
        <Setter Property="Height" Value="8"/>
        <Setter Property="Color" Value="{DynamicResource {x:Static theming:AppColors.ScrollBarForegroundBrush}}"/>
      </Style>
    </ControlTemplate.Resources>
    <Canvas Width="4">
      <Border x:Name="_border"
              Canvas.Right="0"
              Width="4" Height="{TemplateBinding ActualHeight}" CornerRadius="6">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
          </Grid.RowDefinitions>
          <RepeatButton x:Name="_scrollUpButton"
                        Grid.Row="0" Command="ScrollBar.LineUpCommand" Style="{StaticResource ScrollBarLineButtonStyle}">
            <controls:SvgIcon Icon="CaretUp"/>
          </RepeatButton>
          <Track x:Name="PART_Track"
                 Grid.Row="1"
                 IsDirectionReversed="True">
            <Track.DecreaseRepeatButton>
              <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
              <Thumb x:Name="PART_Thumb"
                     OverridesDefaultStyle="True"
                     Cursor="Hand"
                     Width="2">
                <Thumb.Template>
                  <ControlTemplate TargetType="Thumb">
                    <Border Width="{TemplateBinding Width}"
                            Background="{DynamicResource {x:Static theming:AppColors.ScrollBarForegroundBrush}}">
                      <Border.CornerRadius>
                        <MultiBinding Converter="{StaticResource MathConverter}" ConverterParameter="x/2;y/2;z/2;[3]/2">
                          <Binding Path="Width" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                          <Binding Path="Width" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                          <Binding Path="Width" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                          <Binding Path="Width" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                        </MultiBinding>
                      </Border.CornerRadius>
                    </Border>
                  </ControlTemplate>
                </Thumb.Template>
              </Thumb>
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
              <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
            </Track.IncreaseRepeatButton>
          </Track>
          <RepeatButton x:Name="_scrollDownButton"
                        Grid.Row="2" Command="ScrollBar.LineDownCommand" Style="{StaticResource ScrollBarLineButtonStyle}">
            <controls:SvgIcon Icon="CaretDown"/>
          </RepeatButton>
        </Grid>
      </Border>
    </Canvas>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="_border" Property="Background" Value="{DynamicResource {x:Static theming:AppColors.AcrylicBackgroundBrush}}"/>
        <Setter TargetName="_border" Property="Width" Value="12"/>
        <Setter TargetName="_scrollUpButton" Property="Visibility" Value="Visible"/>
        <Setter TargetName="_scrollDownButton" Property="Visibility" Value="Visible"/>
        <Setter TargetName="PART_Thumb" Property="Width" Value="6"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="ScrollBar">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Margin" Value="1"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{StaticResource VerticalScrollBarTemplate}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="Hyperlink">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.AccentTextPrimaryBrush}}"/>
    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="Hyperlink_PreviewMouseLeftButtonDown"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.AccentTextSecondaryBrush}}"/>
        <Setter Property="TextDecorations" Value="None"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.AccentTextDisabledBrush}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="ProgressBar">
    <Setter Property="Background" Value="{DynamicResource {x:Static theming:AppColors.ControlBorderBrush}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static theming:AppColors.AccentDefaultBrush}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ProgressBar">
          <Grid Height="3">
            <Border x:Name="PART_Track"
                    Height="1" CornerRadius="0.5"
                    VerticalAlignment="Center"
                    Background="{TemplateBinding Background}"/>
            <Border x:Name="PART_Indicator"
                    Height="3" CornerRadius="1.5"
                    HorizontalAlignment="Left"
                    Background="{TemplateBinding Foreground}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>

name: Release Application

on:
  workflow_dispatch:


jobs:
  build:
    name: Build
    defaults:
      run:
        shell: pwsh
    strategy:
      matrix:
        include:
          - platform: windows-latest
          # - platform: ubuntu-latest # (planned for future)
    runs-on: ${{ matrix.platform }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'npm'
        cache-dependency-path: ./package-lock.json

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Get version
      id: get-version
      run: |
        Install-Module -Name PSToml -Force
        $cargoToml = Get-Content ./src-tauri/Cargo.toml -Raw | ConvertFrom-Toml
        $version = $cargoToml.package.version
        Write-Host "$version"
        echo "version=$version" >> $env:GITHUB_OUTPUT

    - name: Build Text plugin
      working-directory: ./plugins/text-plugin
      run: |
        npm ci
        npm run build

    - name: NPM clean install
      run: npm ci

    - name: Build Tauri application
      run: npm run tauri build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        if-no-files-found: error
        name: build-output
        path: |
          ./src-tauri/target/release/bundle/nsis/
          ./release-notes.md

    # - name: Build Tauri application
    #   uses: tauri-apps/tauri-action@v0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     releaseDraft: true


  github-release:
    # if: false
    name: Release ${{ needs.build.outputs.version }}
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4

    - name: GitHub release
      env:
        GH_REPO: ${{ github.repository }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release create ${{ needs.build.outputs.version }} `
          build-output/*.(exe|msi) `
          --draft `
          --title ${{ needs.build.outputs.version }} `
          --notes-file 'build-output/release-notes.md'

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build And Test

on:
  workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

jobs:

  build:

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Publish_Dir: .\Tum4ik.JustClipboardManager\bin\publish
      Temporary_Pfx_File_Path: .\GitHubActionsWorkflow.pfx

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET workload
    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        [IO.File]::WriteAllBytes("${{ env.Temporary_Pfx_File_Path }}", $pfx_cert_byte)
        
    - name: .NET publish
      run: dotnet publish -c Release /p:PublishProfile=FolderProfile
    
    - name: Sing files
      run: >
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86\signtool.exe" sign /f ${{ env.Temporary_Pfx_File_Path }} /p ${{ secrets.Pfx_Key }} ${{ env.Publish_Dir }}\JustClipboardManager.dll

    #- name: Signtool Code Sign
    #  uses: GabrielAcostaEngler/signtool-code-sign@1.0.6
    #  with:
    #    certificate: ${{ secrets.Base64_Encoded_Pfx }}
    #    cert-password: ${{ secrets.Pfx_Key }}
    #    cert-sha1: ${{ secrets.Pfx_Sha1 }}
    #    cert-description: 'Just Clipboard Manager'
    #    folder: ${{ env.Publish_Dir }}
    #    recursive: true

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path ${{ env.Temporary_Pfx_File_Path }}

    # https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build files
        path: ${{ env.Publish_Dir }}
        if-no-files-found: error

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build And Test

on:
  workflow_dispatch:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

jobs:

  build:

    name: ${{ github.ref_name }}
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Scripts: .\.github\workflows\scripts
      PublishDir: .\Tum4ik.JustClipboardManager\bin\publish
      InstallerDir: .\Tum4ik.JustClipboardManager\bin\setup
      TemporaryPfxFilePath: .\GitHubActionsWorkflow.pfx

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Define version
      id: define-version
      run: |
        $majorMinor = "${{ github.ref_name }}".Split("/")[-1]
        $buildNumber = "$(Get-Date -Format 'yy')$((Get-Date).DayOfYear)"
        $version = "$majorMinor.$buildNumber.${{ github.run_attempt }}"
        echo "::set-output name=version::$version"
        
    - name: .NET publish
      run: |
        $version = "${{ steps.define-version.outputs.version }}"
        dotnet publish -c Release /p:PublishProfile=FolderProfile_x86 /p:Version=$version /p:InformationalVersion=$version-alpha
        dotnet publish -c Release /p:PublishProfile=FolderProfile_x64 /p:Version=$version /p:InformationalVersion=$version-alpha

    - name: Sign code files
      run: |
        ${{ env.Scripts }}\DecodePfx.ps1 `
          -Base64Pfx "${{ secrets.Base64_Encoded_Pfx }}" `
          -OutputPath ${{ env.TemporaryPfxFilePath }}
        ${{ env.Scripts }}\SignMyCodeFiles.ps1 `
          -FilesDirectoryPath ${{ env.PublishDir }} `
          -PfxFilePath ${{ env.TemporaryPfxFilePath }} `
          -PfxPassword ${{ secrets.Pfx_Key }}
        Remove-Item -Path ${{ env.TemporaryPfxFilePath }}
   
    # todo: setup architecture

    - name: Build installer
      run: |
        curl -L -o InnoSetupInstaller.exe http://files.jrsoftware.org/is/6/innosetup-6.2.1.exe
        .\InnoSetupInstaller.exe /verysilent /allusers /dir=inst | Out-Null
        curl -L -o inst\ISCrypt.dll https://jrsoftware.org/download.php/iscrypt.dll
        .\inst\iscc.exe ".\InnoSetup\Setup.iss"

    # https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build files
        path: ${{ env.InstallerDir }}
        if-no-files-found: error
